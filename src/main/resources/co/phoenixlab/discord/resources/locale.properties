# Bot localization strings

# Response to @mention
message.mention.response                            = U wot <@{0|%s}>?

commands.arguments                                  = Arguments: `{0|%s}`

# Help Command
commands.help.command                               = help
commands.help.help                                  = Lists available commands. Use `[commands.help.command] <command>` for more details about `<command>`
commands.help.detailed_help                         = Use the command with no arguments to list available commands. Use `[commands.help.command] <command>` for more details about `<command>`
commands.help.arguments                             = \[<command>]
commands.help.response.head                         = __**{0|%d} Available {0|(EN_PLURAL;Commands),(ONE;Command)}**__\n
commands.help.response.entry                        = **{0|%s}{1|%s}** - {2|%s}
commands.help.response.detailed                     = `{0|%s}`** Command**\n{1|%s}\n__Arguments:__ `{2|%s}`
commands.help.response.not_found                    = No such command `{0|%s}`

####### General commands #######
# Common
commands.common.user_not_found                      = Unable to find user. Try typing their name EXACTLY or @mention them instead
commands.common.self_reference                      = {0|%s}, you can omit your name when using this command to refer to yourself
commands.common.support_mention_front_match         = Supports @mention and partial front matching.
commands.common.cannot_use_private_message          = You cannot use this command in a private conversation

# Admin
commands.general.admin.command                      = sudo
commands.general.admin.help                         = Administrative commands
commands.general.admin.detailed_help                = Base command for various administrator-only commands. Use `[commands.general.admin.command] [commands.help.help]` to view the list of commands
commands.general.admin.arguments                    = `<args>...`
commands.general.admin.response.reject              = {0|%s} is not in the sudoers file. This incident will be reported

# List admins
commands.general.admins.command                     = admins
commands.general.admins.help                        = List bot administrators
commands.general.admins.detailed_help               = Responds with a list of users who are able to administrate this bot and use the `[commands.general.admin.command]` command
commands.general.admins.arguments                   = <none>
commands.general.admins.response.none               = None
commands.general.admins.response.format             = Admins: {0|%s}

# Info
commands.general.info.command                       = info
commands.general.info.help                          = Display information about the caller or the provided name
commands.general.info.detailed_help                 = Displays information about the provided user, or if no user is specified, the person who issued the command. [commands.common.support_mention_front_match]
commands.general.info.arguments                     = \[<at-mention>|<username>|<start-of-username>|<user-id>]
commands.general.info.response.not_found            = [commands.common.user_not_found]
commands.general.info.response.format               = **Username:** {0|%s}\n**ID:** {1|%s}\n{2|%s}{3|%s}**Avatar:** {4|%s}
commands.general.info.response.no_avatar            = [commands.general.avatar.response.no_avatar]
commands.general.info.response.blacklisted          = **Blacklisted**\n
commands.general.info.response.admin                = **Bot Administrator**\n

# Avatar
commands.general.avatar.command                     = avatar
commands.general.avatar.help                        = Display the avatar of the caller or the provided name. Use `[commands.general.avatar.subcommand.server]` for the server's avatar
commands.general.avatar.detailed_help               = Displays the avatar of the provided user, or if no user is specified, the person who issued the command. [commands.common.support_mention_front_match]. To get the avatar of the server, specify `[commands.general.avatar.subcommand.server]` as the user
commands.general.avatar.arguments                   = \[<at-mention>|<username>|<start-of-username>|<user-id>|"server"]
commands.general.avatar.subcommand.server           = server
commands.general.avatar.response.not_found          = [commands.common.user_not_found]
commands.general.avatar.response.no_avatar          = No avatar
commands.general.avatar.response.format             = {0|%s}'s avatar: {1|%s}
commands.general.avatar.response.server.not_member  = Bot is not a member of that server
commands.general.avatar.response.server.private     = You cannot use the `[commands.general.avatar.subcommand.server]` option in a private message
commands.general.avatar.response.server.format.none = {0|%s} server has no avatar set
commands.general.avatar.response.server.format      = {0|%s} server avatar: {1|%s}

# Version
commands.general.version.command                    = version
commands.general.version.help                       = Display version information
commands.general.version.detailed_help              = Shows information about the git commit that this bot was built from, including hash, GitHub URL, commit date, and commit message
commands.general.version.arguments                  = <none>

# Stats
commands.general.stats.command                      = stats
commands.general.stats.help                         = Display bot statistics
commands.general.stats.detailed_help                = Displays various technical statistics regarding bot operations. You *probably* don't care but its here for you to sate your curiosity. Looking at you, Ael.
commands.general.stats.arguments                    = <none>
commands.general.stats.response.format              = __**Bot Statistics**__\n**MainCommandDispatcher**\nCmdHandleTime: {0|%s} ms\nCmdOKHandleTime: {1|%s} ms\nReceivedCommands: {2|%,d} T/{3|%,d} OK/{4|%,d} KO\n**WebSocketClient**\nMsgHandleTime: {5|%s} ms\nMsgCount: {6|%,d}\nKeepAliveCount: {7|%,d}\nErrorCount: {8|%,d}

# Roles
commands.general.roles.command                      = roles
commands.general.roles.help                         = Display all roles of the caller or the provided name
commands.general.roles.detailed_help                = Lists all roles the user belongs to, displaying their name, id, and color. [commands.common.support_mention_front_match]
commands.general.roles.arguments                    = \[<at-mention>|<username>|<start-of-username>|<user-id>]
commands.general.roles.response.not_found           = [commands.common.user_not_found]
commands.general.roles.response.member_not_found    = Unable to find member. Try typing their name EXACTLY or @mention them instead
commands.general.roles.response.format              = {0|%s}'s roles: {1|%s}
commands.general.roles.response.role.format         = `{0|%s} ({1|%s}) 0x{2|%08X}`
commands.general.roles.response.no_roles            = No Custom Roles
commands.general.roles.response.private             = [commands.common.cannot_use_private_message]

# Change role color
commands.general.rolecolor.command                  = rolecolor
commands.general.rolecolor.help                     = Sets the role's color to a color
commands.general.rolecolor.detailed_help            = Sets the specified role's display color to the specified color. Note that the bot and the caller must have the "Manage Roles" permission. In addition, colors must have a red value of at least 0x10, otherwise the color will be interpreted by Discord as white. Format is AARRGGBB, however alpha is ignored
commands.general.rolecolor.arguments                = <role-id> (<decimal-color>|0x<six-digit-hexadecimal-color>)
commands.general.rolecolor.response.help_format     = Format is [commands.general.rolecolor.arguments]
commands.general.rolecolor.response                 = Role `{0|%s} {1|%s}` color should have been changed to `0x{2|%08X}`
commands.general.rolecolor.response.no_bot_perms    = The bot does not have permission to change role color
commands.general.rolecolor.response.no_user_perms   = You do not have permission to change role color
commands.general.rolecolor.response.role_not_found  = Cannot find the specified role. Double check the role id with the `[commands.general.roles.command]` command
commands.general.rolecolor.response.general_error   = Error while performing command
commands.general.rolecolor.response.private         = [commands.common.cannot_use_private_message]



####### Admin Commands #######

# Start bot
commands.admin.start.command                        = start
commands.admin.start.help                           = Start the bot
commands.admin.start.detailed_help                  = Allows the bot to process all active commands
commands.admin.start.arguments                      = <none>
commands.admin.start.response.ok                    = Bot started
commands.admin.start.response.already_started       = Bot is already running

# Stop bot
commands.admin.stop.command                         = stop
commands.admin.stop.help                            = Stop the bot
commands.admin.stop.detailed_help                   = Prevents the bot from responding to commands except for commands that ignore this setting
commands.admin.stop.arguments                       = <none>
commands.admin.stop.response.ok                     = Bot stopped
commands.admin.stop.response.already_stopped        = Bot is already stopped

# Status
commands.admin.status.command                       = status
commands.admin.status.help                          = Show bot status information
commands.admin.status.detailed_help                 = Shows various pieces of information about the bot's current state. Servers that the bot has joined can be listed by specifying `[commands.admin.status.subcommand.servers]`
commands.admin.status.arguments                     = \[commands.admin.status.subcommand.servers]
commands.admin.status.subcommand.servers            = server
commands.admin.status.response.format               = **Status:** {0|%s}\n**Servers:** {1|%s}\n**Uptime:** {2|%s}\n**Heap:** `{3|%s}`\n**Load:** {4|%.4f}\n**Hamster Wheels in use:** {5|%s}
commands.admin.status.response.state.running        = Running
commands.admin.status.response.state.stopped        = Stopped
commands.admin.status.response.servers.entry        = `{0|%s}`: {1|%s}
commands.admin.status.response.servers.format       = {0|%d} servers:\n{1|%s}
commands.admin.status.response.memory.format        = {0|%,d}MB used {1|%,d}MB committed {2|%,d}MB max

# Kill
commands.admin.kill.command                         = kill
commands.admin.kill.help                            = Kill the bot
commands.admin.kill.detailed_help                   = Ends the JVM process that the bot is running on gracefully
commands.admin.kill.arguments                       = <none>
commands.admin.kill.response                        = Sudoku time, bye

# Restart
commands.admin.restart.command                      = restart
commands.admin.restart.help                         = Restart the bot
commands.admin.restart.detailed_help                = Signals the wrapper to start the application after the JVM exits gracefully
commands.admin.restart.arguments                    = <none>
commands.admin.restart.response                     = Brb quick sudoku game

# Blacklist
commands.admin.blacklist.command                    = blacklist
commands.admin.blacklist.help                       = Adds the provided user to the blacklist, or if none specified, lists blacklisted users
commands.admin.blacklist.detailed_help              = Blacklists the provided user, or lists blacklisted users if no user is provided. [commands.common.support_mention_front_match]
commands.admin.blacklist.arguments                  = \[<at-mention>|<username>|<start-of-username>|<user-id>]
commands.admin.blacklist.response.not_found         = Unable to find user
commands.admin.blacklist.response.admin             = Cannot blacklist a bot administrator
commands.admin.blacklist.response.format            = `{0|%s}` has been blacklisted
commands.admin.blacklist.response.list.none         = None
commands.admin.blacklist.response.list.format       = Blacklisted users: {0|%s}

# Pardon
commands.admin.pardon.command                       = pardon
commands.admin.pardon.help                          = Pardons the provided user from the blacklist.
commands.admin.pardon.detailed_help                 = Pardons (removes) the provided user from the blacklist. [commands.common.support_mention_front_match]
commands.admin.pardon.arguments                     = \[<at-mention>|<username>|<start-of-username>|<user-id>]
commands.admin.pardon.response.no_user              = Please specify a username
commands.admin.pardon.response.not_found            = Unable to find user
commands.admin.pardon.response.format               = `{0|%s}` has been pardoned
commands.admin.pardon.response.not_blacklisted      = `{0|%s}` was not blacklisted

# Join
commands.admin.join.command                         = join
commands.admin.join.help                            = Attempt to join a server using a discord.gg invite link
commands.admin.join.detailed_help                   = Bot will attempt to join using the provided discord.gg invite link
commands.admin.join.arguments                       = <http-discord.gg-invite-link>
commands.admin.join.response.invalid                = Invalid invite link
commands.admin.join.response.http_error             = Unable to join server: HTTP {0|%d}
commands.admin.join.response.network_error          = Unable to join server: Network error

# Telegram
commands.admin.telegram.command                     = telegram
commands.admin.telegram.help                        = Sends a message to the specified channel
commands.admin.telegram.detailed_help               = Sends a simple message using the specified channel ID. Supports mentions for users that are able to be mentioned from the channel the command is being issued from
commands.admin.telegram.arguments                   = <target-channel-id> <message content>
commands.admin.telegram.response.invalid            = Please specify a channelID and message: telegram CHANNEL_ID MESSAGE

# Raw
commands.admin.raw.command                          = raw
commands.admin.raw.help                             = Sends a raw JSON message
commands.admin.raw.detailed_help                    = Send a Message defined using a JSON string. You may optionally specify a target channel ID, similar to the `[commands.admin.telegram.command]` command
commands.admin.raw.arguments                        = \[cid=<target-channel-id>] <json-message>
commands.admin.raw.response.invalid                 = Invalid JSON

# Prefix
commands.admin.prefix.command                       = prefix
commands.admin.prefix.help                          = Get or set the main command prefix
commands.admin.prefix.detailed_help                 = Set the main command prefix to the provided string, or if no string is provided, print the current command prefix
commands.admin.prefix.arguments                     = \[<new-command-prefix>]
commands.admin.prefix.response.get                  = Command prefix: `{0|%d}`
commands.admin.prefix.response.set                  = Command prefix set to: `{0|%d}`

